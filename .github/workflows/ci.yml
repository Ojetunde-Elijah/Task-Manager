name: build-and-deploy

on:
  push:
    branches: [master] # CD on push to master
  pull_request:
    branches: [master, dev] # CI on PRs

jobs:
  # ----- CI: Lint + Build -----
  build-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Backend
      - name: Install backend deps
        working-directory: server
        run: npm ci

      - name: Lint backend (fail on warnings)
        working-directory: server
        run: npm run lint -- --max-warnings=0

      # Frontend
      - name: Install frontend deps
        working-directory: client
        run: npm ci

      - name: Lint frontend (fail on warnings)
        working-directory: client
        run: npm run lint -- --max-warnings=0

      # Sanity: Dockerfile build
      - name: Build backend image
        run: docker build -t backend ./server

      - name: Build frontend image
        run: docker build -t frontend ./client

  # ----- CD: Deploy to Amazon Linux EC2 via SSH -----
  deploy:
    needs: build-and-lint
    if: github.event_name == 'push' # do not deploy on PRs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Write SSH key
        run: |
          echo "${EC2_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2 (git pull + docker compose up -d --build)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          ssh -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << EOF
            set -e
            cd "${EC2_APP_DIR}"

            # fetch latest master
            git fetch --all
            git reset --hard origin/master

            # build & (re)create containers
            docker compose up -d --build

            # clean dangling layers
            docker image prune -f

            docker compose ps
          EOF
